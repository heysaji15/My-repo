name: Hello Android App

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Create minimal Android project
        run: |
          mkdir -p app/src/main/java/com/example/lenstracker
          cat > settings.gradle <<'EOF'
          rootProject.name="LensTracker"
          include(":app")
          EOF
          cat > build.gradle <<'EOF'
          buildscript {
              repositories { google(); mavenCentral() }
              dependencies {
                  classpath "com.android.tools.build:gradle:8.5.2"
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24"
              }
          }
          EOF
          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF
          mkdir -p app/src/main
          cat > app/build.gradle <<'EOF'
          plugins {
              id 'com.android.application'
              id 'org.jetbrains.kotlin.android'
          }
          android {
              namespace "com.example.lenstracker"
              compileSdk 34
              defaultConfig {
                  applicationId "com.example.lenstracker"
                  minSdk 23
                  targetSdk 34
                  versionCode 1
                  versionName "1.0"
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget="17" }
              buildFeatures { compose true }
              composeOptions { kotlinCompilerExtensionVersion '1.5.14' }
          }
          repositories { google(); mavenCentral() }
          dependencies {
              implementation "androidx.activity:activity-compose:1.9.2"
              implementation "androidx.compose.ui:ui:1.7.4"
              implementation "androidx.compose.material:material:1.7.4"
              implementation "androidx.compose.ui:ui-tooling-preview:1.7.4"
              debugImplementation "androidx.compose.ui:ui-tooling:1.7.4"
          }
          EOF
          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <application android:label="LensTracker">
              <activity android:name=".MainActivity" android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF
          cat > app/src/main/java/com/example/lenstracker/MainActivity.kt <<'EOF'
          package com.example.lenstracker

          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.text.input.KeyboardOptions
          import androidx.compose.ui.text.input.KeyboardType
          import androidx.compose.ui.unit.dp

          data class Purchase(val lens:String, val brand:String, val qty:Int, val price:Double) {
              val total: Double get() = qty * price
          }

          class MainActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContent { LensTrackerScreen() }
              }
          }

          @Composable
          fun LensTrackerScreen() {
              var lens by remember { mutableStateOf("") }
              var brand by remember { mutableStateOf("") }
              var qty by remember { mutableStateOf("1") }
              var price by remember { mutableStateOf("") }
              val items = remember { mutableStateListOf<Purchase>() }
              var status by remember { mutableStateOf<String?>(null) }

              val total = items.sumOf { it.total }

              Scaffold(
                  topBar = { TopAppBar(title = { Text("LensTracker") }) }
              ) { padding ->
                  Column(
                      modifier = Modifier
                          .padding(padding)
                          .padding(16.dp)
                          .fillMaxSize()
                  ) {
                      Text("Quick Purchase Entry", style = MaterialTheme.typography.h6)
                      Spacer(Modifier.height(12.dp))

                      OutlinedTextField(
                          value = lens, onValueChange = { lens = it },
                          label = { Text("Lens (e.g., 0.25 sph 0.50 cyl)") },
                          modifier = Modifier.fillMaxWidth()
                      )
                      Spacer(Modifier.height(8.dp))
                      OutlinedTextField(
                          value = brand, onValueChange = { brand = it },
                          label = { Text("Brand") },
                          modifier = Modifier.fillMaxWidth()
                      )
                      Spacer(Modifier.height(8.dp))
                      OutlinedTextField(
                          value = qty, onValueChange = { qty = it },
                          label = { Text("Quantity") },
                          keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                          modifier = Modifier.fillMaxWidth()
                      )
                      Spacer(Modifier.height(8.dp))
                      OutlinedTextField(
                          value = price, onValueChange = { price = it },
                          label = { Text("Unit price") },
                          keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                          modifier = Modifier.fillMaxWidth()
                      )
                      Spacer(Modifier.height(12.dp))
                      Button(onClick = {
                          val q = qty.toIntOrNull()
                          val p = price.toDoubleOrNull()
                          if (lens.isBlank() || brand.isBlank() || q == null || q <= 0 || p == null || p < 0) {
                              status = "Please enter valid Lens, Brand, Quantity, and Price."
                          } else {
                              items += Purchase(lens.trim(), brand.trim(), q, p)
                              qty = "1"; price = ""; status = "Added."
                          }
                      }) { Text("Add Purchase") }

                      status?.let {
                          Spacer(Modifier.height(8.dp))
                          Text(it, style = MaterialTheme.typography.body2)
                      }

                      Spacer(Modifier.height(16.dp))
                      Text("Entries:", style = MaterialTheme.typography.subtitle1)
                      Spacer(Modifier.height(8.dp))

                      LazyColumn(modifier = Modifier.weight(1f)) {
                          items(items) { row ->
                              Row(
                                  modifier = Modifier
                                      .fillMaxWidth()
                                      .padding(vertical = 6.dp),
                                  horizontalArrangement = Arrangement.SpaceBetween
                              ) {
                                  Text("${row.lens} â€¢ ${row.brand} x${row.qty}")
                                  Text(String.format("$%.2f", row.total))
                              }
                              Divider()
                          }
                      }

                      Spacer(Modifier.height(8.dp))
                      Row(
                          modifier = Modifier.fillMaxWidth(),
                          horizontalArrangement = Arrangement.SpaceBetween
                      ) {
                          Text("Total", style = MaterialTheme.typography.h6)
                          Text(String.format("$%.2f", total), style = MaterialTheme.typography.h6)
                      }
                  }
              }
          }
          EOF

      - name: Build with Gradle (no wrapper)
        run: |
          gradle -p app assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk
